function [u cc Iup Qup] = runKasai(I, Q, interpFactor, kernelLength, axial, par)
% function [u Iup Qup] = runLoupas(I, Q, interpFactor, axial, par)
%
% Inputs: I - in-phase data
%         Q - quadrature data
%         interpFactor - upsampling factor
%         axial - axial vector (used for demodulation)
%         par - parameters structure generated by arfi_image
%
% Outputs: u - displacement matrix
%          Iup - upsampled in-phase data
%          Qup - upsampled quadrature data

% Setup parameters
fs = par.fs*1e6;
fc = par.trackParams.reqList.txPulseReqs.TxPulse.fm_mhz*1e6; % Hz
c = 1540; % m/s
kasai_scale = c/(2*pi);

D = size(I); 
D(1) = D(1).*interpFactor;
if interpFactor>1
    [Iup,Qup] = computeUpsampledIQdata(I,Q,interpFactor);
else
    Iup = I;
    Qup = Q;
end
Iup = reshape(Iup, D);
Qup = reshape(Qup, D);

fs = fs*interpFactor;
kasai_avg = round(kernelLength*fs/fc);

fdem = par.trackParams.Apl3.Mod(1).DsF.data*1e6; % frequency dataset values (MHz shift)
frange = par.trackParams.Apl3.Mod(1).DsF.rr;  % reference ranges (mm)
fc_vec = reshape(interp1(frange, fdem, axial), size(Iup,1), 1);
fdem_vec = fc_vec./fs;

tstart = tic;
u = zeros(size(Iup));          
u = (computeDisplacementsSamTrack(complex(Iup,Qup),par.nref-1,kasai_avg,c,fc));%compute displacements
u = 1e-6*phase_unwrap(u*1e6,fc,par.nref+3);%phase unwrap
u(:,:,par.nref:-1:1) = 1e-6*phase_unwrap(u(:,:,par.nref:-1:1)*1e6,fc,0);%phase unwrap

u = -u.*1e6;
u = u(1:end-kasai_avg-1, :, :, :);
tend = toc(tstart);
fprintf(1, 'Displacement Computation Time: %0.2fs\n', tend);

fprintf('Computing Complex Correlation Coefficients...\n')
cc = abs(ComputeCC(complex(Iup,Qup),kasai_avg,par.nref));
cc = cc(1:size(u,1),:,:);
