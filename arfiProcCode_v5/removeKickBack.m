function [u] = removeKickBack(I, Q, interpFactor, kernelLength,searchLength, axial, par)
% function [u Iup Qup] = runLoupas(I, Q, interpFactor, axial, par)
%
% Inputs: I - in-phase data
%         Q - quadrature data
%         interpFactor - upsampling factor
%         axial - axial vector (used for demodulation)
%         par - parameters structure generated by arfi_image
%
% Outputs: u - displacement matrix
%          Iup - upsampled in-phase data
%          Qup - upsampled quadrature data

% Setup parameters
fs = par.fs*1e6;
fc = par.trackParams.reqList.txPulseReqs.TxPulse.fm_mhz*1e6; % Hz
c = 1540; % m/s
NumIter = 3;

D = size(I); 
D(1) = D(1).*interpFactor;
if interpFactor>1
    [Iup,Qup] = computeUpsampledIQdata(I,Q,interpFactor);
else
    Iup = I;
    Qup = Q;
end
Iup = reshape(Iup, D);
Qup = reshape(Qup, D);

fs = fs*interpFactor;
KLen = ceil(kernelLength*fs/fc);
if KLen < 3
    warning('Extending Kernel Length to 3 sample (%0.1f wavelengths).',KLen*fc/fs);
    KLen = 3;
end
SrchLen = round(searchLength*fs/fc);

fdem = par.trackParams.Apl3.Mod(1).DsF.data*1e6; % frequency dataset values (MHz shift)
frange = par.trackParams.Apl3.Mod(1).DsF.rr;  % reference ranges (mm)
fc_vec = reshape(interp1(frange, fdem, axial), size(Iup,1), 1);
fdem_vec = fc_vec./fs;

tstart = toc;
IQ = complex(Iup,Qup);
IQref = repmat((IQ(:,:,par.nref)),[1 1 size(IQ,3)]);
%[Lags IQ2] = PesaventoGross(IQref,IQ,KLen,searchLength);
[Tau0 cc0]= PesaventoParallelWholeLine2(reshape(IQref,size(IQ,1),par.nBeams,[],par.ensemble),reshape(IQ,size(IQ,1),par.nBeams,[],par.ensemble),fs,fc,SrchLen,NumIter);
Tau0 = repmat(Tau0,[size(IQ,1),par.nBeams,1,1]);
Tau0=  reshape(Tau0,size(IQ));
%u = (-1*Lags*(1/fs) + Tau) * c/2 * 1e6;
u = Tau0*c/2*1e6;
tend = toc(tstart);
fprintf(1, 'Displacement Computation Time: %0.2fs\n', tend);
