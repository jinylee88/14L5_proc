function [u cc Iup Qup] = runFlux(I, Q, t, interpFactor, kernelLength, axial, par)
% function [u Iup Qup] = runLoupas(I, Q, interpFactor, axial, par)
%
% Inputs: I - in-phase data
%         Q - quadrature data
%         interpFactor - upsampling factor
%         axial - axial vector (used for demodulation)
%         par - parameters structure generated by arfi_image
%
% Outputs: u - displacement matrix
%          Iup - upsampled in-phase data
%          Qup - upsampled quadrature data

% Setup parameters
fs = par.fs*1e6;
fc = par.trackParams.reqList.txPulseReqs.TxPulse.fm_mhz*1e6; % Hz
c = 1540; % m/s
kasai_scale = c/(2*pi);

D = size(I); 
D(1) = D(1).*interpFactor;
[Iup,Qup] = computeUpsampledIQdata(I,Q,interpFactor);
Iup = reshape(Iup, D);
Qup = reshape(Qup, D);

fs = fs*interpFactor;
kasai_avg = round(kernelLength*fs/fc);

fdem = par.trackParams.Apl3.Mod(1).DsF.data*1e6; % frequency dataset values (MHz shift)
frange = par.trackParams.Apl3.Mod(1).DsF.rr;  % reference ranges (mm)
fc_vec = reshape(interp1(frange, fdem, axial), size(Iup,1), 1);
fdem_vec = fc_vec./fs;

fprintf('Computing Complex Correlation Coefficients...')
cc = abs(ComputeCC(complex(Iup,Qup),kasai_avg,par.nref));
fprintf('done\n')

tstart = tic;
u = nan(size(Iup));

ccprof = diff(min(squeeze(mean(cc))));
ccmask = ones(size(cc,3),1);
if any(ccprof<-10/255) && any(ccprof>10/255);
ccmask(find(ccprof<-10/255,1,'last')+1:find(ccprof>10/255,1,'last')) = 0;
end
ccmask(par.nref+[1 2]) = 0;

%tidx = [1:par.nref par.nref+3:size(Iup,3)];
tidx = find(ccmask);
v = (computeFluxSamTrack(complex(Iup(:,:,tidx),Qup(:,:,tidx)),t(tidx),kasai_avg,c,fc));%compute displacements
deltat = repmat(permute(diff(t(tidx)),[1 3 2]),[size(v,1),size(v,2),1]);
% avg = nanmean(squeeze(nanmean(abs(v))));
% fixidx = find(avg>0.1e-3);
% for i = 1:length(fixidx);
%     if fixidx(i)>1 && fixidx(i)<size(v,3);
%     v(:,:,fixidx(i)) = mean(v(:,:,fixidx(i)+[-1 1]),3);
%     end
% end

u(:,:,tidx) = cumsum(cat(3,zeros(size(v,1),size(v,2),1),v.*deltat),3);
u1 = reshape(permute(u,[3 1 2]),size(u,3),[]);
u1 = interp1(t(tidx),u1(tidx,:),t,'linear','extrap');
u = (permute(reshape(u1,size(u1,1),size(u,1),size(u,2)),[2 3 1]));
u = u - u(:,:,par.nref*ones(1,size(u,3)));
% u(:,:,par.nref+1) = u(:,:,par.nref) + 1/3*diff(u(:,:,par.nref+[0 3]),1,3);
% u(:,:,par.nref+2) = u(:,:,par.nref) + 2/3*diff(u(:,:,par.nref+[0 3]),1,3);

%u = 1e-6*phase_unwrap(u*1e6,fc,par.nref+3);%phase unwrap
%u(:,:,par.nref:-1:1) = 1e-6*phase_unwrap(u(:,:,par.nref:-1:1)*1e6,fc,0);%phase unwrap

u = -u.*1e6;
u = u(1:end-kasai_avg-1, :, :, :);
cc = cc(1:size(u,1),:,:);


tend = toc(tstart);

fprintf(1, 'Displacement Computation Time: %0.2fs\n', tend);
return

function [v] = computeFluxSamTrack(data,t,k_length,c,f0)
 [L,W,H] = size(data);
 data0 = reshape(data(:,:,1:end-1),L,W*(H-1));
 data1 = reshape(data(:,:,2:end),L,W*(H-1));
 dt01 = diff(t);
 dt10 = diff(t(end:-1:1));
 swin = ones(k_length,1)/k_length;  
 v = kasai(data0,data1,dt01,swin,c,f0,L,W,H);
% v10 = kasai(data1,data0,-dt01,swin,c,f0,L,W,H);
  
  
function v = kasai(data0,data1,dt,swin,c,f0,L,W,H)
 nu01 = imag(data1).*real(data0)-real(data1).*imag(data0);
 de01 = real(data1).*real(data0)+imag(data1).*imag(data0);
 for i = 1:1000:size(nu01,2)
     idx = i:min(i+999,size(nu01,2));
 Nu01(:,idx) = conv2(nu01(:,idx),swin,'same');
 De01(:,idx) = conv2(de01(:,idx),swin,'same');
 end
 u  = atan2(Nu01,De01);
 u  = u * (c/(f0*4*pi)); 
u = reshape(u,L,W,H-1);
dt = repmat(permute(dt(:),[2 3 1]),L,W);
v = u./dt;
return

 