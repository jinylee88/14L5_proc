function [v cc Iup Qup] = runLoupasFlux(I, Q, t, interpFactor, kernelLength, axial, par)
% function [u Iup Qup] = runLoupas(I, Q, interpFactor, axial, par)
%
% Inputs: I - in-phase data
%         Q - quadrature data
%         interpFactor - upsampling factor
%         axial - axial vector (used for demodulation)
%         par - parameters structure generated by arfi_image
%
% Outputs: u - displacement matrix
%          Iup - upsampled in-phase data
%          Qup - upsampled quadrature data

% Setup parameters
fs = par.fs*1e6;
fc = par.trackParams.reqList.txPulseReqs.TxPulse.fm_mhz*1e6; % Hz
c = 1540; % m/s
kasai_scale = c/(2*pi);

D = size(I); 
D(1) = D(1).*interpFactor;
[Iup,Qup] = computeUpsampledIQdata(I,Q,interpFactor);
Iup = reshape(Iup, D);
Qup = reshape(Qup, D);

fs = fs*interpFactor;
kasai_avg = round(kernelLength*fs/fc);

fdem = par.trackParams.Apl3.Mod(1).DsF.data*1e6; % frequency dataset values (MHz shift)
frange = par.trackParams.Apl3.Mod(1).DsF.rr;  % reference ranges (mm)
fc_vec = reshape(interp1(frange, fdem, axial), size(Iup,1), 1);
fdem_vec = fc_vec./fs;

%Compute Displacements
tstart = tic;
v = zeros(size(Iup));
fprintf(1, 'Displacement Estimation for Beam %03.0d/%03.0d...', 0, size(Iup,2));
for i = 1:size(Iup,2)

    fprintf(1, '\b\b\b\b\b\b\b\b\b\b%03.0d/%03.0d...', i, size(Iup,2));
    for k = 1:(size(Iup,3)-1)
        Iref = squeeze(Iup(:,i,k));
        Qref = squeeze(Qup(:,i,k));
        out = zeros(size(Iup,1),1);
        Idisp = squeeze(Iup(:,i,k+1));
        Qdisp = squeeze(Qup(:,i,k+1));
        out = loupas(Iref,Qref,Idisp,Qdisp,size(Iup,1),kasai_avg,fdem_vec,fc_vec,kasai_scale,out);
        v(:,i,k) = out;
    end
end
v = v(:,:,[1:end-1]);
fprintf('\n');
v = -v.*1e6;
v = v(1:end-kasai_avg-1, :, :, :);




tend = toc(tstart);

fprintf(1, 'Displacement Computation Time: %0.2fs\n', tend);

fprintf('Computing Complex Correlation Coefficients...\n')
cc = abs(ComputeCC(complex(Iup,Qup),kasai_avg,par.nref));
cc = cc(1:size(v,1),:,:);
