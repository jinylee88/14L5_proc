function [u cc Iup Qup] = runPesaventoFlux(I, Q, t, interpFactor, kernelLength,searchLength, axial, par, verbose)
% function [u Iup Qup] = runLoupas(I, Q, interpFactor, axial, par)
%
% Inputs: I - in-phase data
%         Q - quadrature data
%         interpFactor - upsampling factor
%         axial - axial vector (used for demodulation)
%         par - parameters structure generated by arfi_image
%
% Outputs: u - displacement matrix
%          Iup - upsampled in-phase data
%          Qup - upsampled quadrature data

% Setup parameters
fs = par.fs*1e6;
fc = par.trackParams.reqList.txPulseReqs.TxPulse.fm_mhz*1e6; % Hz
c = par.c; % m/s
NumIter = 3;

if ~exist('verbose','var')
    verbose = 0;
end

D = size(I); 
D(1) = D(1).*interpFactor;
if interpFactor>1
    [Iup,Qup] = computeUpsampledIQdata(I,Q,interpFactor);
else
    Iup = I;
    Qup = Q;
end
Iup = reshape(Iup, D);
Qup = reshape(Qup, D);

fs = fs*interpFactor;
KLen = ceil(kernelLength*fs/fc);
if KLen < 3
    warning('Extending Kernel Length to 3 sample (%0.1f wavelengths).',KLen*fc/fs);
    KLen = 3;
end
SrchLen = round(searchLength*fs/fc);

fdem = par.trackParams.Apl3.Mod(1).DsF.data*1e6; % frequency dataset values (MHz shift)
frange = par.trackParams.Apl3.Mod(1).DsF.rr;  % reference ranges (mm)
fc_vec = reshape(interp1(frange, fdem, axial), size(Iup,1), 1);
fdem_vec = fc_vec./fs;

tstart = tic;
IQ = complex(Iup,Qup);
idx = [2:par.nref par.nref(ones(1,2+par.npush)) par.nref+par.npush+1:par.ensemble-1];
IQref = IQ(:,:,idx);
%[Lags IQ2] = PesaventoGross(IQref,IQ,KLen,searchLength);
[Tau cc]= PesaventoParallel4(IQref,IQ,fs,fc,KLen,SrchLen,NumIter);
u = zeros(size(Tau));
u(:,:,par.nref:-1:1) = cumsum(Tau(:,:,par.nref:-1:1),3);
u(:,:,par.nref+par.npush+1:end) = cumsum(Tau(:,:,par.nref+par.npush+1:end),3);
u(:,:,par.nref+(1:par.npush+1)) = Tau(:,:,par.nref+(1:par.npush+1));
u = u*c/2*1e6;
%[Tau0 cc0]= PesaventoParallelWholeLine2(IQref,IQ,fs,fc,SrchLen,NumIter);
%Tau0 = repmat(Tau0,[size(Tau,1) 1 1]);
%u0 = zeros(size(Tau0));
%u0(:,:,par.nref:-1:1) = cumsum(Tau0(:,:,par.nref:-1:1),3);
%u0(:,:,par.nref+par.npush+1:end) = cumsum(Tau0(:,:,par.nref+par.npush+1:end),3);
%u0(:,:,par.nref+(1:par.npush+1)) = Tau0(:,:,par.nref+(1:par.npush+1));
%u0 = u0*c/2*1e6;
tend = toc(tstart);
fprintf(1, 'Displacement Computation Time: %0.2fs\n', tend);
